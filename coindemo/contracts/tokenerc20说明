ERC20规则

Token

方法

注意：调用者必须处理返回false的returns (bool success).调用者绝对不能假设返回false的情况不存在。


name

返回这个令牌的名字

可选 

function name() constant returns (string name)1



symbol

返回令牌的符号，比如HIX.

可选 

function symbol() constant returns (string symbol)1



decimals

返回token使用的小数点后几位， 比如 8,表示分配token数量为100000000

可选 

function decimals() constant returns (uint8 decimals)1



totalSupply

返回token的总供应量。

function totalSupply() constant returns (uint256 totalSupply)1



balanceOf

返回地址是_owner的账户的账户余额。

function balanceOf(address _owner) constant returns (uint256 balance)1



transfer

转移_value的token数量到的地址_to，并且必须触发Transfer事件。 如果_from帐户余额没有足够的令牌来支出，该函数应该被throw。

创建新令牌的令牌合同应该在创建令牌时将_from地址设置为0x0触发传输事件。

注意 0值的传输必须被视为正常传输并触发传输事件。

function transfer(address _to, uint256 _value) returns (bool success)1



transferFrom

从地址_from发送数量为_value的token到地址_to,必须触发Transfer事件。

transferFrom方法用于提取工作流，允许合同代您转移token。这可以用于例如允许合约代您转让代币和/或以子货币收取费用。除了_from帐户已经通过某种机制故意地授权消息的发送者之外，该函数**应该**throw。

注意 0值的传输必须被视为正常传输并触发传输事件。

function transferFrom(address _from, address _to, uint256 _value) returns (bool success)1



approve

允许_spender多次取回您的帐户，最高达_value金额。 如果再次调用此函数，它将以_value覆盖当前的余量。

注意：为了阻止向量攻击，客户端需要确认以这样的方式创建用户接口，即将它们设置为0，然后将其设置为同一个花费者的另一个值。虽然合同本身不应该强制执行，允许向后兼容以前部署的合同兼容性

function approve(address _spender, uint256 _value) returns (bool success)1





Events


Transfer

当token被转移(包括0值)，必须被触发。

event Transfer(address indexed _from, address indexed _to, uint256 _value)1



Brun

用来通知客户端代币被消耗(这里就不是转移, 是token用了就没了)

event Burn(address indexed from, uint256 value);

